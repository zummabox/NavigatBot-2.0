from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import asyncio

from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import (orm_add_detail, orm_get_details,
                                orm_delete_detail, orm_get_detail,
                                orm_update_detail, orm_get_categories,
                                orm_get_detail_report, orm_get_tasks, orm_delete_task, orm_get_task_by_id)

from filters.chat_types import ChatTypeFilter, IsAdmin
from handlers.fsm_utils import go_to_next_state
from handlers.user_private import GROUP_CHAT_ID
from kbds.callback_list import report_buttons, add_buttons
from kbds.inline_kbds import get_callback_btns
from kbds.reply_kbds import get_keyboard


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
    "–û—Ç—á–µ—Ç",
    "–û—Ç—á–µ—Ç –ø–æ –¥–µ—Ç–∞–ª—è–º",
    "–ó–∞–¥–∞—á–∏",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)


@admin_router.message(Command("admin"))
async def add_product(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


########################## –û—Ç—á–µ—Ç –ø–æ –¥–µ—Ç–∞–ª—è–º ####################################
class Report(StatesGroup):
    category_report = State()
    detail_report = State()


@admin_router.message(StateFilter(None), F.text == "–û—Ç—á–µ—Ç –ø–æ –¥–µ—Ç–∞–ª—è–º")
async def detail_report(message: types.Message, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(Report.category_report)


@admin_router.callback_query(Report.category_report)
async def category_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    category_id = int(callback.data)
    if category_id in [category.id for category in categories]:

        await callback.answer()
        await state.update_data(category_report=callback.data)

        if category_id in report_buttons:
            btns = report_buttons[category_id]
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å.', reply_markup=get_callback_btns(btns=btns))
        await state.set_state(Report.detail_report)


@admin_router.callback_query(Report.detail_report, F.data.startswith('report:'))
async def get_detail_report(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    detail_name = callback.data.split(":")[-1]
    detail_data = await orm_get_detail_report(session, detail_name)
    if detail_data:
        for detail in detail_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_date = detail.updated.strftime("%d.%m.%y %H:%M:%S")

            await callback.message.answer(
                f"<b>‚öôÔ∏è–î–µ—Ç–∞–ª—å:</b> {detail.name}\n<b>#Ô∏è‚É£–ù–æ–º–µ—Ä:</b> {detail.number}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {detail.status}"
                f"\n<b>üìù–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b> {formatted_date}",
                reply_markup=get_callback_btns(
                    btns={
                        "‚ùå–£–¥–∞–ª–∏—Ç—å": f"delete_detail_{detail.id}",
                        "üìù–ò–∑–º–µ–Ω–∏—Ç—å": f"change_detail_{detail.id}",
                    },
                    sizes=(2,)
                ),
                parse_mode="HTML",
            )
    await callback.answer()
    await callback.message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π ‚¨ÜÔ∏è")
    await state.clear()


########################## –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–¥–µ–ª–∏—é ####################################
@admin_router.message(F.text == "–û—Ç—á–µ—Ç")
async def all_report(message: types.Message, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: f'category_{category.id}' for category in categories}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ", reply_markup=get_callback_btns(btns=btns))


@admin_router.callback_query(F.data.startswith('category_'))
async def all_report(callback: types.CallbackQuery, session: AsyncSession):
    category_id = callback.data.split('_')[-1]
    for detail in await orm_get_details(session, int(category_id)):
        await callback.message.answer(
            f"<b>‚öôÔ∏è–î–µ—Ç–∞–ª—å:</b> {detail.name}\
                                \n<b>#Ô∏è‚É£–ù–æ–º–µ—Ä</b> {detail.number}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {detail.status}",
            reply_markup=get_callback_btns(
                btns={
                    "‚ùå–£–¥–∞–ª–∏—Ç—å": f"delete_detail_{detail.id}",
                    "üìù–ò–∑–º–µ–Ω–∏—Ç—å": f"change_detail_{detail.id}",
                },
                sizes=(2,)
            ),
            parse_mode="HTML",
        )
    await callback.answer()
    await callback.message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–∏–π ‚¨ÜÔ∏è")

#################################### –û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º ###################################
@admin_router.message(F.text == "–ó–∞–¥–∞—á–∏")
async def all_tasks(message: types.Message, session: AsyncSession):
    tasks = await orm_get_tasks(session)

    if not tasks:
        await message.answer("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    for task in tasks:
        task_text = f"üìå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n" \
                    f"üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {task.username}\n" \
                    f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {task.contact_number}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `get_callback_btns` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        btns = get_callback_btns(btns={"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É": f"delete_task_{task.id}"})

        await message.answer(task_text, reply_markup=btns, parse_mode="HTML")

########################## –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–∏ ####################################
@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_item(callback: types.CallbackQuery, session: AsyncSession):
    data_parts = callback.data.split("_")  # –†–∞–∑–±–∏–≤–∞–µ–º callback-–¥–∞–Ω–Ω—ã–µ

    if len(data_parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    item_type = data_parts[1]  # –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (task –∏–ª–∏ detail)
    try:
        item_id = int(data_parts[2])  # ID —ç–ª–µ–º–µ–Ω—Ç–∞
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞: ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
    if item_type == "task":
        task = await orm_get_task_by_id(session, item_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        if not task:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if task.group_message_id:
            try:
                await callback.message.bot.delete_message(GROUP_CHAT_ID, task.group_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: {e}")

        await orm_delete_task(session, item_id)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
        message_text = "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏
    elif item_type == "detail":
        detail = await orm_get_detail(session, item_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å
        if not detail:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await orm_delete_detail(session, item_id)  # –£–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª—å –∏–∑ –ë–î
        message_text = "–î–µ—Ç–∞–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ"

    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!")
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        await callback.message.edit_text("üóë –£–¥–∞–ª–µ–Ω–∏–µ...")
        await asyncio.sleep(1)
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.answer(message_text, show_alert=False)


########################## –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ####################################
class AddDetails(StatesGroup):
    category = State()
    name = State()
    process_details = State()

    detail_for_change = None

    texts = {
        'AddDetails:category': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ:',
        'AddDetails:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddDetails:process_details': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–æ–º–µ—Ä, –°—Ç–∞—Ç—É—Å',
    }


@admin_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_detail_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}

    detail_id = callback.data.split("_")[-1]
    AddDetails.detail_for_change = await orm_get_detail(session, int(detail_id))

    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(AddDetails.category)

############################# –ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è FSM ##########################################
@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def add_category(message: types.Message, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}
    await message.delete()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(AddDetails.category)


############################## –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∏ –Ω–∞–∑–∞–¥ #######################################
@admin_router.callback_query(StateFilter('*'), F.data == "cancel:–æ—Ç–º–µ–Ω–∞")
async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ADMIN_KB)
    await callback.answer()


@admin_router.callback_query(F.data.startswith("back"))
async def process_back_button(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    state_history = data.get('state_history', [])

    if len(state_history) < 2:
        await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.", show_alert=True)
        return

    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏ –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    state_history.pop()
    previous_state = state_history[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(state_history=state_history)
    await state.set_state(previous_state)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    previous_text = AddDetails.texts.get(previous_state, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if previous_state == AddDetails.category.state:
        categories = await orm_get_categories(session)
        btns = {category.name: str(category.id) for category in categories}
        keyboard = get_callback_btns(btns=btns)
    elif previous_state == AddDetails.name.state:
        user_data = await state.get_data()
        category_id = user_data.get('category')
        btns = add_buttons.get(category_id, {})
        keyboard = get_callback_btns(btns=btns)
    else:
        keyboard = None

    await callback_query.message.edit_text(previous_text, reply_markup=keyboard)

################################################################################################


@admin_router.callback_query(AddDetails.category)
async def category_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    category_id = int(callback.data)
    categories = await orm_get_categories(session)

    if category_id in [category.id for category in categories]:
        btns = add_buttons.get(category_id, {})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ state
        await state.update_data(category=category_id, prev_buttons=get_callback_btns(btns=btns))

        # –ü–µ—Ä–µ—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await go_to_next_state(state, AddDetails.name)

        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å.', reply_markup=get_callback_btns(btns=btns))
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.")



######## –õ–æ–≤–∏–º –ª—é–±—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #########
@admin_router.message(AddDetails.category)
async def category_choice2(message: types.Message):
    await message.answer("'–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.'")

##############################################################################################

@admin_router.callback_query(AddDetails.name, F.data.startswith("add:"))
async def add_name(callback: types.CallbackQuery, state: FSMContext):
    name = callback.data.split(":")[-1]

    btns = {
        "‚ùå–û—Ç–º–µ–Ω–∞": "cancel:–æ—Ç–º–µ–Ω–∞",
        "üîô–ù–∞–∑–∞–¥": "back"
    }
    keyboard = get_callback_btns(btns=btns, sizes=(2,))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    await state.update_data(name=AddDetails.detail_for_change.name if name.strip().lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else name)

    # –ü–µ—Ä–µ—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await go_to_next_state(state, AddDetails.process_details)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–æ–º–µ—Ä, –°—Ç–∞—Ç—É—Å'",
                                     reply_markup=keyboard)



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_router.message(AddDetails.name)
async def add_name(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫")

##############################################################################################

@admin_router.message(AddDetails.process_details, F.text)
async def add_process_details(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()
    details_data = message.text.split("\n")
    state_data = await state.get_data()

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ state_data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(state_data, dict):
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if "category" not in state_data:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    for detail_data in details_data:
        data = detail_data.split(',')
        if len(data) == 2:
            number, status = map(str.strip, data)
            number = AddDetails.detail_for_change.number if number == "." else number
            status = AddDetails.detail_for_change.status if status == "." else status
            state_data.update({'number': number, 'status': status})

            if AddDetails.detail_for_change:
                await orm_update_detail(session, AddDetails.detail_for_change.id, state_data)
                await message.answer("–î–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ state_data
                data = dict(state_data)  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è
                data["category"] = state_data["category"]
                await orm_add_detail(session, data)
                await message.answer("–î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ù–æ–º–µ—Ä, –°—Ç–∞—Ç—É—Å")
            return

    await state.clear()
    AddDetails.detail_for_change = None
    summary = f"<b>‚öôÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {state_data.get('name')}\n<b>#Ô∏è‚É£–ù–æ–º–µ—Ä:</b> {state_data.get('number')}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {state_data.get('status')}"
    await message.answer(f"<b>üìù–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n{summary}", parse_mode="HTML")


