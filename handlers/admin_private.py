from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import asyncio

from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import MsgId
from database.orm_query import (orm_add_detail, orm_get_details,
                                orm_delete_detail, orm_get_detail,
                                orm_update_detail, orm_get_categories,
                                orm_get_detail_report, orm_get_tasks,
                                orm_delete_task, orm_get_task_by_id,
                                update_summary_msg_id, update_all_report_msg_id,
                                update_detail_report_msg_id,
                                update_last_action_msg_id, delete_last_action_msg_id)

from filters.chat_types import ChatTypeFilter, IsAdmin
from handlers.fsm_utils import go_to_next_state
from handlers.user_private import GROUP_CHAT_ID
from kbds.callback_list import report_buttons, add_buttons
from kbds.inline_kbds import get_callback_btns


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


def get_admin_menu():
    btns = {
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ": "admin:add_data",
        "üìä –û—Ç—á–µ—Ç": "admin:report",
        "üìã –û—Ç—á–µ—Ç –ø–æ –¥–µ—Ç–∞–ª—è–º": "admin:details_report",
        "üìå –ó–∞–¥–∞—á–∏": "admin:tasks",
    }
    return get_callback_btns(btns=btns, sizes=(2,))


@admin_router.message(Command("admin"))
async def show_admin_menu(message: types.Message):
    await message.answer("üìù–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", reply_markup=get_admin_menu())


########################## –û—Ç—á–µ—Ç –ø–æ –¥–µ—Ç–∞–ª—è–º ####################################
class Report(StatesGroup):
    category_report = State()
    detail_report = State()


@admin_router.callback_query(StateFilter(None), F.data == "admin:details_report")
async def detail_report(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ ‚öôÔ∏è", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(Report.category_report)
    await callback.answer()


@admin_router.callback_query(Report.category_report)
async def category_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    category_id = int(callback.data)
    if category_id in [category.id for category in categories]:

        await callback.answer()
        await state.update_data(category_report=callback.data)

        if category_id in report_buttons:
            btns = report_buttons[category_id]
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å.', reply_markup=get_callback_btns(btns=btns))
        await state.set_state(Report.detail_report)


@admin_router.callback_query(Report.detail_report, F.data.startswith('report:'))
async def get_detail_report(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    detail_name = callback.data.split(":")[-1]
    detail_data = await orm_get_detail_report(session, detail_name)

    if detail_data:
        for detail in detail_data:
            formatted_date = detail.updated.strftime("%d.%m.%y %H:%M:%S")

            btns = {
                "‚ùå –£–¥–∞–ª–∏—Ç—å": f"delete_detail_{detail.id}",
                "üìù –ò–∑–º–µ–Ω–∏—Ç—å": f"change_detail_{detail.id}",
            }

            msg = await callback.message.answer(
                f"<b>‚öôÔ∏è–î–µ—Ç–∞–ª—å:</b> {detail.name}\n<b>#Ô∏è‚É£–ù–æ–º–µ—Ä:</b> {detail.number}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {detail.status}\n<b>üìù–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b> {formatted_date}",
                reply_markup=get_callback_btns(btns=btns, sizes=(2,)),
                parse_mode="HTML",
            )
            await update_detail_report_msg_id(session, callback.message.chat.id, msg.message_id)

        hide_btn = {"üëÄ –°–∫—Ä—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": "hide_details_report"}
        hide_msg = await callback.message.answer(
            "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –∏—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=get_callback_btns(btns=hide_btn, sizes=(1,))
        )
        await update_detail_report_msg_id(session, callback.message.chat.id, hide_msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_msg = await callback.message.answer("–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_admin_menu())
    await update_last_action_msg_id(session, callback.message.chat.id, summary_msg.message_id)

    await state.clear()
    await callback.answer()

########################## –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–¥–µ–ª–∏—é ####################################
@admin_router.callback_query(F.data == "admin:report")
async def all_report(callback: types.CallbackQuery, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: f'category_{category.id}' for category in categories}
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ ‚öôÔ∏è", reply_markup=get_callback_btns(btns=btns))
    await callback.answer()


@admin_router.callback_query(F.data.startswith('category_'))
async def all_report(callback: types.CallbackQuery, session: AsyncSession):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    category_id = callback.data.split('_')[-1]
    report_msg_ids = []

    for detail in await orm_get_details(session, int(category_id)):
        msg = await callback.message.answer(
            f"<b>‚öôÔ∏è–î–µ—Ç–∞–ª—å:</b> {detail.name}\n<b>#Ô∏è‚É£–ù–æ–º–µ—Ä:</b> {detail.number}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {detail.status}",
            reply_markup=get_callback_btns(
                btns={
                    "‚ùå–£–¥–∞–ª–∏—Ç—å": f"delete_detail_{detail.id}",
                    "üìù–ò–∑–º–µ–Ω–∏—Ç—å": f"change_detail_{detail.id}",
                },
                sizes=(2,)
            ),
            parse_mode="HTML",
        )
        report_msg_ids.append(msg.message_id)

    hide_report_msg = await callback.message.answer(
        "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –∏—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ.",
        reply_markup=get_callback_btns(
            btns={"üëÄ –°–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç": f"hide_report_{category_id}"},
            sizes=(1,)
        ),
    )
    report_msg_ids.append(hide_report_msg.message_id)

    for msg_id in report_msg_ids:
        await update_all_report_msg_id(session, chat_id=callback.message.chat.id, new_msg_id=msg_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_msg = await callback.message.answer("–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_admin_menu())
    await update_last_action_msg_id(session, callback.message.chat.id, summary_msg.message_id)

    await callback.answer()


#################################### –û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º ###################################
@admin_router.callback_query(F.data == "admin:tasks")
async def all_tasks(callback: types.CallbackQuery, session: AsyncSession):
    tasks = await orm_get_tasks(session)

    if not tasks:
        await callback.message.edit_text("üôÖ‚Äç‚ôÇÔ∏è–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=get_admin_menu())
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    for task in tasks:
        task_text = f"üìå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n" \
                    f"üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {task.username}\n" \
                    f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {task.contact_number}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `get_callback_btns` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        btns = get_callback_btns(btns={"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É": f"delete_task_{task.id}"})

        await callback.message.answer(task_text, reply_markup=btns, parse_mode="HTML")

    await callback.answer()

########################## –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–∏ ####################################
@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_item(callback: types.CallbackQuery, session: AsyncSession):
    data_parts = callback.data.split("_")  # –†–∞–∑–±–∏–≤–∞–µ–º callback-–¥–∞–Ω–Ω—ã–µ

    if len(data_parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    item_type = data_parts[1]  # –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (task –∏–ª–∏ detail)
    try:
        item_id = int(data_parts[2])  # ID —ç–ª–µ–º–µ–Ω—Ç–∞
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞: ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
    if item_type == "task":
        task = await orm_get_task_by_id(session, item_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        if not task:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if task.group_message_id:
            try:
                await callback.message.bot.delete_message(GROUP_CHAT_ID, task.group_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: {e}")

        await orm_delete_task(session, item_id)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏
    elif item_type == "detail":
        detail = await orm_get_detail(session, item_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å
        if not detail:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await orm_delete_detail(session, item_id)  # –£–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª—å –∏–∑ –ë–î

    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!")
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        await callback.message.edit_text("üóë –£–¥–∞–ª–µ–Ω–∏–µ...")
        await asyncio.sleep(1)
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


########################## –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ####################################
class AddDetails(StatesGroup):
    category = State()
    name = State()
    process_details = State()

    detail_for_change = None

    texts = {
        'AddDetails:category': '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∑–∞–Ω–æ–≤–æ ‚öôÔ∏è:',
        'AddDetails:name': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∑–∞–Ω–æ–≤–æ üî©:',
        'AddDetails:process_details': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ù–æ–º–µ—Ä</b>, <b>–°—Ç–∞—Ç—É—Å</b>',
    }


@admin_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_detail_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    #–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = await session.execute(select(MsgId).filter_by(chat_id=callback.message.chat.id))
    msg_record = result.scalars().first()

    if msg_record and msg_record.last_action_msg_id:
        try:
            #–£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.bot.delete_message(chat_id=callback.message.chat.id,
                                              message_id=msg_record.last_action_msg_id)

            #–û—á–∏—â–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
            await delete_last_action_msg_id(session, chat_id=callback.message.chat.id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}

    btns["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"] = "add:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

    detail_id = callback.data.split("_")[-1]
    AddDetails.detail_for_change = await orm_get_detail(session, int(detail_id))

    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ ‚öôÔ∏è", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(AddDetails.category)


############################# –ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è FSM ##########################################
@admin_router.callback_query(StateFilter(None), F.data == "admin:add_data")
async def add_category(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await orm_get_categories(session)
    btns = {category.name: str(category.id) for category in categories}

    btns["‚ùå–û—Ç–º–µ–Ω–∞"] = "cancel:–æ—Ç–º–µ–Ω–∞"

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ ‚öôÔ∏è", reply_markup=get_callback_btns(btns=btns, sizes=(2,)))
    await state.set_state(AddDetails.category)
    await callback.answer()


############################## –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∏ –Ω–∞–∑–∞–¥ #######################################
@admin_router.callback_query(StateFilter('*'), F.data == "cancel:–æ—Ç–º–µ–Ω–∞")
async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É", reply_markup=get_admin_menu())
    await callback.answer()


@admin_router.callback_query(F.data.startswith("back"))
async def process_back_button(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    state_history = data.get('state_history', [])

    if len(state_history) < 2:
        await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.", show_alert=True)
        return

    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏ –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    state_history.pop()
    previous_state = state_history[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(state_history=state_history)
    await state.set_state(previous_state)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    previous_text = AddDetails.texts.get(previous_state, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if previous_state == AddDetails.category.state:
        categories = await orm_get_categories(session)
        btns = {category.name: str(category.id) for category in categories}
        keyboard = get_callback_btns(btns=btns)
    elif previous_state == AddDetails.name.state:
        user_data = await state.get_data()
        category_id = user_data.get('category')
        btns = add_buttons.get(category_id, {})
        keyboard = get_callback_btns(btns=btns)
    else:
        keyboard = None

    await callback_query.message.edit_text(previous_text, reply_markup=keyboard)

################################################################################################

@admin_router.callback_query(AddDetails.category)
async def fsm_category_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    category_data = callback.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if category_data == "add:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = AddDetails.detail_for_change.category_id
        await state.update_data(category=category_id)
    else:
        category_id = int(category_data)
        categories = await orm_get_categories(session)

        if category_id in [category.id for category in categories]:
            await state.update_data(category=category_id)
        else:
            return await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏
    btns = add_buttons.get(category_id, {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ state
    await state.update_data(prev_buttons=get_callback_btns(btns=btns))

    # –ü–µ—Ä–µ—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await go_to_next_state(state, AddDetails.name)

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å üî©', reply_markup=get_callback_btns(btns=btns))

######## –õ–æ–≤–∏–º –ª—é–±—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #########
@admin_router.message(AddDetails.category)
async def fsm_category_choice(message: types.Message):
    await message.answer("'–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.'")

##############################################################################################

@admin_router.callback_query(AddDetails.name, F.data.startswith("add:"))
async def add_name(callback: types.CallbackQuery, state: FSMContext):
    name = callback.data.split(":")[-1]

    btns = {
        "‚ùå–û—Ç–º–µ–Ω–∞": "cancel:–æ—Ç–º–µ–Ω–∞",
        "üîô–ù–∞–∑–∞–¥": "back"
    }
    keyboard = get_callback_btns(btns=btns, sizes=(2,))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    await state.update_data(name=AddDetails.detail_for_change.name if name.strip().lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else name)

    # –ü–µ—Ä–µ—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await go_to_next_state(state, AddDetails.process_details)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ù–æ–º–µ—Ä</b>, <b>–°—Ç–∞—Ç—É—Å</b>",
                                           reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(instruction_msg_id=msg.message_id)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_router.message(AddDetails.name)
async def add_name(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫")

##############################################################################################

@admin_router.message(AddDetails.process_details, F.text)
async def add_process_details(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å..."
    if "instruction_msg_id" in state_data:
        try:
            await message.bot.delete_message(message.chat.id, state_data["instruction_msg_id"])
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    details_data = message.text.split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
    added_details = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    for detail_data in details_data:
        data = detail_data.split(',')
        if len(data) == 2:
            number, status = map(str.strip, data)
            number = AddDetails.detail_for_change.number if number == "." else number
            status = AddDetails.detail_for_change.status if status == "." else status

            # –û–±–Ω–æ–≤–ª—è–µ–º state_data
            state_data.update({'number': number, 'status': status})

            if AddDetails.detail_for_change:
                await orm_update_detail(session, AddDetails.detail_for_change.id, state_data)
            else:
                await orm_add_detail(session, state_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            added_details.append(f"<b>#Ô∏è‚É£–ù–æ–º–µ—Ä:</b> {number}\n<b>‚ôªÔ∏è–°—Ç–∞—Ç—É—Å:</b> {status}")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ù–æ–º–µ—Ä</b>, <b>–°—Ç–∞—Ç—É—Å</b>")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏
    if added_details:
        success_msg = await message.answer("–í–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ... üìù")
        await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—ã
        try:
            await success_msg.delete()
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    summary = "\n\n".join(added_details)

    # –ö–Ω–æ–ø–∫–∞ "–°–∫—Ä—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    hide_btn = {
        "üëÄ –°–∫—Ä—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": "hide_summary"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏—à–∞–º–∏
    summary_msg = await message.answer(
        f"<b>üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n{summary}",
        reply_markup=get_callback_btns(btns=hide_btn, sizes=(1,)),
        parse_mode="HTML"
    )
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await update_summary_msg_id(session, message.chat.id, summary_msg.message_id)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_admin_menu())

    await state.clear()
    AddDetails.detail_for_change = None


@admin_router.callback_query(F.data == "hide_summary")
async def hide_summary_callback(call: types.CallbackQuery, session: AsyncSession):
    chat_id = call.message.chat.id
    print(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    async with session.begin():
        result = await session.execute(select(MsgId).filter_by(chat_id=chat_id))
        msg_record = result.scalars().first()

    if msg_record and msg_record.summary_msg_id:
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {msg_record.summary_msg_id}")
        try:
            await call.message.bot.delete_message(chat_id, msg_record.summary_msg_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {msg_record.summary_msg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        async with session.begin():
            msg_record.summary_msg_id = None
            await session.commit()
            print(f"ID –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ")

        await call.answer("–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã", show_alert=False)
    else:
        print("–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è", show_alert=False)


@admin_router.callback_query(F.data.startswith('hide_report_'))
async def hide_report(callback: types.CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º category_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    category_id = callback.data.split('_')[-1]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with session.begin():
        result = await session.execute(select(MsgId).filter_by(chat_id=callback.message.chat.id))
        msg_record = result.scalars().first()

    if msg_record and msg_record.all_report_msg_id:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
        msg_ids = msg_record.all_report_msg_id.split(",")

        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for msg_id in msg_ids:
            try:
                await callback.message.bot.delete_message(callback.message.chat.id, int(msg_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

        # –û—á–∏—Å—Ç–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
        async with session.begin():
            msg_record.all_report_msg_id = None
            await session.commit()

    await callback.answer("–û—Ç—á–µ—Ç —Å–∫—Ä—ã—Ç", show_alert=False)


@admin_router.callback_query(F.data == "hide_details_report")
async def hide_summary(callback: types.CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ chat_id
    result = await session.execute(select(MsgId).filter_by(chat_id=callback.message.chat.id))
    msgs = result.scalars().all()

    if msgs:
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in msgs:
            try:
                if msg.detail_report_msg_id:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg.detail_report_msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ chat_id
        try:
            for msg in msgs:
                await session.delete(msg)
            await session.commit()
            print(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è chat_id {callback.message.chat.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await session.rollback()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.")

    await callback.answer()
