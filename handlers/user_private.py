import os

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_add_task
from filters.chat_types import ChatTypeFilter
from aiogram.fsm.state import State, StatesGroup

from handlers.user_group import user_group_router
from kbds.reply_kbds import get_keyboard

GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏ –Ω–∞ –∫–ª–∞–≤–∏—à—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=get_keyboard(
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(1,)
        ),
    )


class Task(StatesGroup):
    description = State()
    username = State()
    contact_number = State()


@user_private_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.reply("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É")
    await state.set_state(Task.description)


@user_private_router.message(Task.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –ò–º—è")
    await state.set_state(Task.username)


@user_private_router.message(Task.username, F.text)
async def add_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º keyboard
    markup = types.ReplyKeyboardMarkup(
        keyboard=[[button]],  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        resize_keyboard=True
    )

    await message.reply("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=markup)
    await state.set_state(Task.contact_number)

@user_private_router.message(F.contact)
async def add_contact(message: types.Message, state: FSMContext, session: AsyncSession):
    if not message.contact:
        await message.reply("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'.")
        return

    contact_number = message.contact.phone_number  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä
    await state.update_data(contact_number=contact_number)

    data = await state.get_data()

    bot = message.bot  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞

    task_text = (
        f"üìå <b>–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</b>\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {data['username']}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact_number}"
    )
    group_message = None

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        group_message = await bot.send_message(chat_id=GROUP_CHAT_ID, text=task_text, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task –∏ group_message_id –≤ –ë–î
    data["group_message_id"] = group_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await orm_add_task(session, data)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î —Å group_message_id

    await message.reply(
        "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        reply_markup=get_keyboard(
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(1,)
        )
    )
    await state.clear()